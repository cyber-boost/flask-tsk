# Dumbo - The Lightweight cURL Flyer
# ==================================
# HTTP Requests That Soar in TuskPHP

[metadata]
elephant = "Dumbo"
role = "HTTP Client - cURL Wrapper"
created = "1941 (Disney), adapted for TuskPHP"
specialty = "Simple HTTP requests, parallel processing, automatic retries"

[backstory]
# Dumbo, Disney's beloved flying elephant, was born with oversized ears that
# made him the subject of ridicule. But those same ears became his greatest
# gift - allowing him to soar through the air with grace and speed. With the
# help of Timothy Mouse and a "magic feather," Dumbo discovered he could fly,
# becoming the star of the circus and proving that what makes you different
# makes you special.
#
# In TuskPHP, Dumbo transforms complex cURL operations into simple, elegant
# flights across the web, making HTTP requests as easy as spreading your ears
# and taking off.

[purpose]
# Like Dumbo who could fly effortlessly with his big ears, this cURL wrapper
# makes HTTP requests soar. It's lightweight, fast, and turns what could be
# complex operations into simple, elegant flights across the web. No magic
# feather needed - just clean, simple code that flies!

[features]
fluent_api = "Simple, chainable methods for HTTP requests"
auto_retry = "Automatic retries with exponential backoff"
response_cache = "Memory-based caching for repeated requests"
parallel_requests = "Handle multiple requests simultaneously"
cookie_management = "Built-in cookie jar support"
progress_tracking = "Callbacks for download progress"
error_handling = "Graceful error handling with detailed logging"

[methods]

## Basic HTTP Methods

### get($url, $params = [])
# Performs GET request - Dumbo's basic flight
# Parameters:
#   - $url: Target URL
#   - $params: Query parameters array
# Returns: Response array with body, info, status, time
# Cached for 5 minutes on successful responses

### post($url, $data = [])
# Performs POST request - Dumbo carries cargo
# Parameters:
#   - $url: Target URL
#   - $data: POST data array or string
# Returns: Response array with body, info, status, time

### put($url, $data = [])
# Performs PUT request
# Parameters:
#   - $url: Target URL
#   - $data: PUT data
# Returns: Response array

### delete($url)
# Performs DELETE request
# Parameters:
#   - $url: Target URL
# Returns: Response array

### patch($url, $data = [])
# Performs PATCH request
# Parameters:
#   - $url: Target URL
#   - $data: PATCH data
# Returns: Response array

## Advanced Features

### fly($url, $method = 'GET')
# Core flight method - handles all HTTP requests
# Private method that executes requests with retry logic
# Features:
#   - Automatic caching
#   - Exponential backoff retries
#   - Error handling
#   - Response formatting

### flyFormation($requests)
# Parallel request handling - Dumbo's circus act!
# Parameters:
#   - $requests: Array of request configurations
#     Each request: ['url' => '', 'options' => []]
# Returns: Array of responses keyed by request
# Perfect for API aggregation or bulk operations

### download($url, $destination, $progressCallback = null)
# Downloads file with optional progress tracking
# Parameters:
#   - $url: Source URL
#   - $destination: Local file path
#   - $progressCallback: Function($percent, $downloaded, $total)
# Returns: Boolean success
# Example callback shows download progress

## Configuration Methods

### withHeaders($headers)
# Sets custom HTTP headers
# Parameters:
#   - $headers: Array of headers
# Returns: $this for chaining
# Example: ['Authorization' => 'Bearer token']

### withTimeout($seconds)
# Sets request timeout
# Parameters:
#   - $seconds: Timeout in seconds
# Returns: $this for chaining
# Default: 30 seconds

### withRetries($count)
# Sets retry attempt count
# Parameters:
#   - $count: Number of retry attempts
# Returns: $this for chaining
# Default: 3 attempts

### withMagicFeather($enabled = true)
# Enables confidence mode - more retries, longer timeout
# Parameters:
#   - $enabled: Boolean to enable/disable
# Returns: $this for chaining
# When enabled: 5 retries, 60 second timeout

### withCookies($cookies)
# Sets cookies for requests
# Parameters:
#   - $cookies: Cookie array or string
# Returns: $this for chaining

### withAuth($username, $password)
# Sets basic authentication
# Parameters:
#   - $username: Auth username
#   - $password: Auth password
# Returns: $this for chaining

## Utility Methods

### canReach($url)
# Health check - tests if URL is reachable
# Parameters:
#   - $url: URL to test
# Returns: Boolean - true if status 200-399

### getLastError()
# Gets the last cURL error message
# Returns: String error message or null

### getCookieJar()
# Gets current cookie collection
# Returns: Array of cookies

### clearCache()
# Clears Dumbo's flight cache
# Returns: void

### setUserAgent($agent)
# Sets custom user agent
# Parameters:
#   - $agent: User agent string
# Returns: $this for chaining
# Default: 'Dumbo/1.0 (TuskPHP; Flying Elephant)'

[usage_examples]

## Simple GET Request
```php
$dumbo = new Dumbo();
$response = $dumbo->get('https://api.example.com/users');

echo $response['body'];        // Response content
echo $response['status'];      // HTTP status code
echo $response['time'];        // Request time
```

## POST with Headers
```php
$dumbo = new Dumbo();
$response = $dumbo->withHeaders([
    'Authorization' => 'Bearer token123',
    'Content-Type' => 'application/json'
])->post('https://api.example.com/users', [
    'name' => 'Timothy Mouse',
    'role' => 'Best Friend'
]);
```

## Parallel Requests (Flying Formation)
```php
$requests = [
    'users' => ['url' => 'https://api.example.com/users'],
    'posts' => ['url' => 'https://api.example.com/posts'],
    'comments' => ['url' => 'https://api.example.com/comments']
];

$results = $dumbo->flyFormation($requests);

// All requests executed in parallel!
foreach ($results as $key => $response) {
    echo "Got {$key}: " . $response['body'] . "\n";
}
```

## File Download with Progress
```php
$dumbo->download(
    'https://example.com/large-file.zip',
    '/tmp/download.zip',
    function($percent, $downloaded, $total) {
        echo "Downloaded: {$percent}% ({$downloaded}/{$total} bytes)\r";
    }
);
```

## Retry with Magic Feather
```php
// Enable confidence mode for difficult requests
$dumbo->withMagicFeather(true)
      ->withTimeout(120)
      ->get('https://slow-api.example.com/data');
```

## Health Check
```php
if ($dumbo->canReach('https://api.example.com')) {
    echo "API is flying high!";
} else {
    echo "API is grounded.";
}
```

[integration]
cache = "Memory for response caching"
logging = "Can integrate with TuskPHP logging"
errors = "Throws exceptions on fatal errors"

[configuration]
# Example configuration in .tsk format
[dumbo]
default_timeout = 30
max_retries = 3
cache_ttl = 300
user_agent = "Dumbo/1.0 (TuskPHP)"

[dumbo.ssl]
verify_peer = true
verify_host = 2

[dumbo.proxy]
enabled = false
server = ""
port = 8080

[notes]
# Dumbo makes HTTP requests simple and fun. The magic feather mode is
# particularly useful for unreliable APIs - it gives Dumbo the confidence
# to keep trying when things get tough.
#
# The parallel request feature (flyFormation) is perfect for dashboard
# pages that need to aggregate data from multiple sources. Dumbo can
# coordinate multiple flights simultaneously, just like in the circus!
#
# Future enhancements could include:
# - WebSocket support (working with Tantor)
# - GraphQL query builder
# - Request/Response middleware
# - Automatic rate limiting
# - OAuth flow helpers